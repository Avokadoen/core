-- Beispiel-Datei f√ºr ein Dunstwolke Template

-- Data-Layout:
Object {
	-- each object has an inherent
    -- id   = Type.id,      -- the unique object identifier
	name    = Type.string,  -- the name of the person
	genders = Type.list,    -- all possible genders (id,name)
	gender  = Type.id,      -- the selected gender
	age     = Type.integer, -- age of the person in years
	retired = Type.boolean, -- is the person already retired?
	notes   = Type.string,  -- notes of the operator
}

/**
 * models the following dialog:
 * https://www.researchgate.net/profile/Richard_Kennard/publication/224517249/figure/fig1/AS:302832667381772@1449212342988/Example-UI-with-5-fields.png
**/
DockLayout {
	vertical-alignment: stretch;
	horizontal-alignment: stretch;
	
  GridLayout {
    /* this widget will layout at the bottom of the parent */
    dock-site: bottom;
    
    /* two columns, both take the same size
       number of rows is inferred by
       "rowcount = ceil(childcount / colcount)
       when no row definition list is given. */
    columns: expand, expand;
    
    Button {
      horizontal-alignment: right;
      vertical-alignment: bottom;
      Label {
        text: "Save"
      }
    }
    Button {
      horizontal-alignment: left;
      vertical-alignment: bottom;
      Label {
        text: "Delete"
      }
    }
  }
  /* Contains the main table */
  GridLayout {
    /* two columns */
    columns: auto, expand; /* auto=minimum size, expand=take rest */
    Label {
      text: "Name*:";
      horizontal-alignment: right;
    }
    TextBox {
      text: bind("name");
    }
    Label {
      text: "Age:";
      horizontal-alignment: right;
    }
    Slider {
      value: bind("age");
      minimum: 0;
      maximum: 100;
    }
    Label {
      text: "Gender:";
      horizontal-alignment: right,
    },
    ComboBox {
      items: bind("genders"); /* load all possible values from .genders */
      selected-item: bind("gender"); /* store the selected object into .gender */
      /* show ".title" of the gender object */
      text-property: "title";
    },
    Label {
      text: "Retired:";
      horizontal-alignment: right;
    }
    Label {
      /*
        format allows defining the 
        value formatting of a property
        so it can be made human-readable
        this allows also text boxes
        to display and edit numeric types
        or booleans!
      */
      text: bind("retired", format=yesno),
    }
    Label {
      text: "Notes:";
      horizontal-alignment: right;
      vertical-alignment: top;
    }
    TextBox {
      multiline: true;
      text: bind("notes");
      horizontal-alignment: stretch;
    }
  }
}
