-- Beispiel-Datei f√ºr ein Dunstwolke Template

-- Data-Layout:
Object {
	-- each object has an inherent
    -- id   = Type.id,      -- the unique object identifier
	name    = Type.string,  -- the name of the person
	genders = Type.list,    -- all possible genders (id,name)
	gender  = Type.id,      -- the selected gender
	age     = Type.integer, -- age of the person in years
	retired = Type.boolean, -- is the person already retired?
	notes   = Type.string,  -- notes of the operator
}

-- UI-Layout:
DockLayout {
	verticalAlign = Enum.stretch,
	horizontalAlign = Enum.stretch,
	
	children = {
		-- Contains the two buttons at the bottom
		-- TODO: How to store "dock=bottom"?
		-- thoughs: not as a child property, as  this
		-- would destroy "inheritance"/code resuse
		-- solution: Maybe as a second property "childAlignments"?
		GridLayout {
			columns = {
				-- two columns, both take the same size
				-- number of rows is inferred by
				-- "rowcount = ceil(childcount / colcount)
				-- when no row definition list is given.
				Enum.expand,
				Enum.expand
			}
			children = {
				Button {
					horizontalAlign = Enum.right,
					verticalAlign = Enum.bottom,
					children = {
						Label {
							text = "Save"
						}
					}
				},
				Button {
					horizontalAlign = Enum.left,
					verticalAlign = Enum.bottom,
					children = {
						Label {
							text = "Delete"
						}
					}
				}
			}
		}
		-- Contains the main
		GridLayout {
			columns = {
				-- two columns
				Enum.auto, -- first takes minimum size
				Enum.expand, -- second takes rest of the size
			},
			children = {
				Label {
					text = "Name*:",
					horizontalAlign = Enum.right,
				},
				TextBox {
					text = Binding("name");
				},
				Label {
					text = "Age:",
					horizontalAlign = Enum.right,
				},
				Slider {
					value = Binding("age"),
					step = 1,
					minimum = 0,
					maximum = 100,
				},
				Label {
					text = "Gender:",
					horizontalAlign = Enum.right,
				},
				ComboBox {
					-- TODO: think about how to serialize
					-- a known list here...
					items = Binding("genders"),
					-- TODO: think about how to return the
					-- binding index instead of object id
					selectedItem = Binding("gender"),
					-- show ".title" of the gender object
					textProperty = "title",
				},
				Label {
					text = "Retired:",
					horizontalAlign = Enum.right,
				},
				Label {
					-- format allows defining the 
					-- value formatting of a property
					-- so it can be made human-readable
					-- this allows also text boxes
					-- to display and edit numeric types
					-- or booleans!
					text = Binding("retired", format=Enum.yesno),
				},
				Label {
					text = "Notes:",
					horizontalAlign = Enum.right,
					verticalAlign = Enum.top,
				},
				TextBox {
					multiline = true,
					text = Binding("notes"),
					horizontalAlign = Enum.stretch,
				}
			}
		}
	}
}
